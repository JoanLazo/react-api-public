{"version":3,"sources":["components/Form.js","components/Recipes.js","App.js","components/Recipe.js","components/Router.js","registerServiceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","getRecipe","style","marginBottom","className","type","name","Recipes","recipes","map","recipe","key","recipe_id","src","image_url","alt","title","length","concat","substring","publisher","react_router_dom","to","pathname","state","API_KEY","App","_callee","e","recipeName","api_call","data","regenerator_default","wrap","_context","prev","next","target","elements","value","preventDefault","fetch","sent","json","_this","setState","console","log","stop","componentDidUpdate","JSON","stringify","localStorage","setItem","componentDidMount","getItem","parse","components_Form","this","components_Recipes","Component","Recipe","activeRecipe","req","res","location","href","publisher_url","React","Router","basename","process","react_router","path","component","exact","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","components_Router","document","getElementById","URL","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.208ab588.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = props => (\r\n    <form onSubmit={props.getRecipe} style={{ marginBottom: \"2rem\"}} >\r\n    <input className=\"form__input\" type=\"text\" name='recipeName'/>\r\n    <button className=\"form__button\">Buscar</button>\r\n    </form>\r\n);\r\n  export default Form; \r\n    \r\n        \r\n\r\n    ","import React from 'react';\r\n\r\nimport { Link } from \"react-router-dom\"; \r\n\r\nconst Recipes = props => (\r\n    <div className=\"container\">\r\n        <div className=\"row\">\r\n            {props.recipes.map( (recipe) => {\r\n                 return(\r\n             <div key={recipe.recipe_id} className=\"col-md-4\" style={{ marginBottom: \"2rem\"}} >\r\n                   <div className=\"recipes__box\">\r\n                        <img className=\"recipe__box-img\" \r\n                         src={recipe.image_url} \r\n                         alt={recipe.title} />\r\n                 <div className=\"recipe__text\">\r\n                    <h5 className=\"recipes__title\">\r\n                    {recipe.title.length < 20 ? `${recipe.title}`: `${recipe.title.substring(0, 25)}...` }\r\n                    </h5>\r\n                    <p className=\"recipes__subtitle\">Publicidad: <span>\r\n                        { recipe.publisher }\r\n                    </span></p>\r\n                    <button className=\"recipe_buttons\">\r\n                        <Link to={{ \r\n                            pathname: `/recipe/${recipe.recipe_id}`,\r\n                            state: { recipe: recipe.title }\r\n                            }}>Ver Patillo</Link>\r\n                    </button>\r\n                 </div>    \r\n                </div>\r\n             </div>\r\n          ) \r\n        })}\r\n        </div>\r\n    </div>\r\n\r\n);\r\nexport default Recipes;","import React, { Component } from 'react';\nimport './App.css';\n// import Router from './components/Router';\nimport Form from './components/Form';\nimport Recipes from './components/Recipes';\n\nconst API_KEY= \"d8e51b0e060abe5b4da35c5260931229\";\n\nclass App extends Component {\n  state = {\n    recipes : []\n  }\n  getRecipe = async (e) => {\n    const recipeName = e.target.elements.recipeName.value;\n    e.preventDefault();\n    const api_call = await fetch(`http://cors-anywhere.herokuapp.com/https://www.food2fork.com/api/search?key=${API_KEY}&q=${recipeName}&count=5`);\n\n    const data = await api_call.json();\n    this.setState({ recipes: data.recipes })\n    console.log(this.state.recipes);\n  }\n  \n  componentDidUpdate = () => {\n    const recipes = JSON.stringify(this.state.recipes);\n    localStorage.setItem(\"recipes\", recipes);\n  }\n  componentDidMount = () => {\n    const json = localStorage.getItem(\"recipes\");\n    const recipes = JSON.parse(json);\n    this.setState({ recipes });\n  }\n \n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Busqueda de Platillos</h1>\n        </header>\n        <Form getRecipe={this.getRecipe} /> \n        <Recipes recipes={this.state.recipes} />\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst API_KEY= \"d8e51b0e060abe5b4da35c5260931229\";\r\n\r\nclass Recipe extends React.Component {\r\n   state = {\r\n       activeRecipe: []\r\n   } \r\n   componentDidMount = async () => {\r\n    const title = this.props.location.state.recipe;\r\n    const req = await fetch(`http://cors-anywhere.herokuapp.com/https://www.food2fork.com/api/search?key=${API_KEY}&q=${title}`);\r\n\r\n    const res = await req.json();\r\n    this.setState({ activeRecipe: res.recipes[0] });\r\n    console.log(this.state.activeRecipe)\r\n   }\r\n\r\n render(){\r\n    const recipe = this.state.activeRecipe;\r\n    return (\r\n      <div className=\"container\">\r\n        { this.state.activeRecipe.length !== 0 &&\r\n          <div className=\"active-recipe\">\r\n            <img className=\"active-recipe__img\" src={recipe.image_url} alt={recipe.title}/>\r\n            <h3 className=\"active-recipe__title\">{ recipe.title }</h3>\r\n            <h4 className=\"active-recipe__publisher\">\r\n              Publisidad: <span>{ recipe.publisher }</span>\r\n            </h4>\r\n            <p className=\"active-recipe__website\">Website: \r\n              <span><a href={recipe.publisher_url}>{recipe.publisher_url}</a></span>\r\n            </p>\r\n            <button className=\"active-recipe__button\">\r\n              <Link to=\"/\">Inicio</Link>\r\n            </button>\r\n          </div>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Recipe;","import React from 'react';\r\nimport {HashRouter, Route} from \"react-router-dom\";\r\nimport App from \"../App\";\r\nimport Recipe from \"./Recipe\";\r\n\r\nconst Router = () => (\r\n  <HashRouter basename={process.env.PUBLIC_URL}>\r\n        <Route path=\"/\" component={App} exact />\r\n        <Route path=\"/recipe/:id\" component={Recipe} />\r\n    </HashRouter>\r\n);\r\n\r\n    \r\nexport default Router;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Router from \"./components/Router\";\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}